{"version":3,"sources":["NotePressedContext.tsx","highNoteFace.png","mouthClosed.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NotePressedContext","createContext","NotePressedContextProvider","props","pressedState","useState","Provider","value","useNotePressed","useContext","notes","C4","D4","E4","F4","G4","A4","B4","C5","D5","E5","F5","G5","A5","B5","C6","blackNotes","sampler","Tone","urls","baseUrl","toDestination","Note","note","keyboard","white","pressed","setPressed","setGlobalPressed","useEffect","triggerAttack","triggerRelease","pressNote","releaseNote","document","addEventListener","e","includes","key","className","classnames","onMouseDown","onMouseUp","onMouseEnter","buttons","onMouseLeave","Array","isArray","join","Image","src","openFace","closedFace","App","Object","entries","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.34542ca2.chunk.js","sourcesContent":["import { createContext, FunctionComponent, useContext, useState } from \"react\";\r\n\r\nconst NotePressedContext = createContext<\r\n  [boolean, (newValue: boolean) => void]\r\n>([false, () => null]);\r\n\r\nconst NotePressedContextProvider: FunctionComponent = (props) => {\r\n  const pressedState = useState(false);\r\n  return <NotePressedContext.Provider value={pressedState} {...props} />;\r\n};\r\n\r\nconst useNotePressed = () => useContext(NotePressedContext);\r\n\r\nexport { NotePressedContextProvider, useNotePressed };\r\n","export default __webpack_public_path__ + \"static/media/highNoteFace.add42043.png\";","export default __webpack_public_path__ + \"static/media/mouthClosed.ea1eff2d.png\";","import {\n  FunctionComponent,\n  MouseEventHandler,\n  useEffect,\n  useState,\n} from \"react\";\nimport * as Tone from \"tone\";\nimport classnames from \"classnames\";\nimport \"./App.css\";\nimport { useNotePressed } from \"./NotePressedContext\";\nimport openFace from \"./highNoteFace.png\";\nimport closedFace from \"./mouthClosed.png\";\n\nconst notes = {\n  C4: \"q\",\n  D4: \"w\",\n  E4: \"e\",\n  F4: \"r\",\n  G4: \"t\",\n  A4: \"y\",\n  B4: \"u\",\n  C5: [\"i\", \"c\"],\n  D5: \"v\",\n  E5: \"b\",\n  F5: \"n\",\n  G5: \"m\",\n  A5: \",\",\n  B5: \".\",\n  C6: \"/\",\n};\n\nconst blackNotes = {\n  \"C#4\": \"2\",\n  \"D#4\": \"3\",\n  \"F#4\": \"5\",\n  \"G#4\": \"6\",\n  \"A#4\": \"7\",\n  \"C#5\": \"f\",\n  \"D#5\": \"g\",\n  \"F#5\": \"j\",\n  \"G#5\": \"k\",\n  \"A#5\": \"l\",\n};\n\nconst sampler = new Tone.Sampler({\n  urls: {\n    C4: \"1_C4.mp3\",\n    D4: \"2_D4.mp3\",\n    E4: \"3_E4.mp3\",\n    F4: \"4_F4.mp3\",\n    G4: \"5_G4.mp3\",\n    A4: \"6_A4.mp3\",\n    B4: \"7_B4.mp3\",\n    C5: \"8_C5.mp3\",\n    D5: \"9_D5.mp3\",\n    E5: \"10_E5.mp3\",\n    F5: \"11_F5.mp3\",\n    G5: \"12_G5.mp3\",\n    A5: \"13_A5.mp3\",\n    B5: \"14_B5.mp3\",\n    C6: \"15_C6.mp3\",\n  },\n  baseUrl: \"/samples/\",\n}).toDestination();\n\ntype NoteProps = {\n  note: string;\n  keyboard: string | string[];\n  white?: boolean;\n};\n\nconst Note: FunctionComponent<NoteProps> = ({ note, keyboard, white }) => {\n  const [pressed, setPressed] = useState(false);\n  const [_, setGlobalPressed] = useNotePressed();\n\n  useEffect(() => {\n    if (pressed) {\n      sampler.triggerAttack(note);\n    } else {\n      sampler.triggerRelease(note);\n    }\n  }, [pressed, note]);\n\n  const pressNote = () => {\n    setPressed(true);\n    setGlobalPressed(true);\n  };\n\n  const releaseNote = () => {\n    setPressed(false);\n    setGlobalPressed(false);\n  };\n\n  const handleMouseEnter: MouseEventHandler = (e) => {\n    if (e.buttons) {\n      pressNote();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", (e) => {\n      if (keyboard.includes(e.key)) {\n        pressNote();\n      }\n    });\n\n    document.addEventListener(\"keyup\", (e) => {\n      if (keyboard.includes(e.key)) {\n        releaseNote();\n      }\n    });\n  }, [keyboard]);\n\n  const className = classnames(\n    white ? \"whiteNote\" : \"blackNote\",\n    pressed && \"pressed\"\n  );\n\n  return (\n    <button\n      className={className}\n      onMouseDown={pressNote}\n      onMouseUp={releaseNote}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={releaseNote}\n    >\n      <div className=\"keyboardLabel\">\n        {Array.isArray(keyboard) ? keyboard.join(\"/\") : keyboard}\n      </div>\n    </button>\n  );\n};\n\nconst Image: FunctionComponent = () => {\n  const [pressed] = useNotePressed();\n\n  return <img className=\"image\" src={pressed ? openFace : closedFace} />;\n};\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Image />\n      <div className=\"piano-wrapper\">\n        <div className=\"piano\">\n          <div className=\"whiteRow\">\n            {Object.entries(notes).map(([note, key]) => (\n              <Note key={note} note={note} keyboard={key} white />\n            ))}\n          </div>\n          <div className=\"blackRow\">\n            {Object.entries(blackNotes).map(([note, key]) => (\n              <Note key={note} note={note} keyboard={key} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { NotePressedContextProvider } from \"./NotePressedContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <NotePressedContextProvider>\n      <App />\n    </NotePressedContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}